type Comment {
  commentId: ID!
  author: String!
  content: String!
  postedAt: DateTime!
  score: Int!
  article: Article # Non-nullable because every Comment must be associated with an Article
}

input CreateCommentInput {
  articleId: ID! # Non-nullable because a Comment must be associated with an Article
  author: String! # Non-nullable because a Comment must have an author
  content: String! # Non-nullable because a Comment must have content
}

input VoteCommentInput {
  commentId: ID! # Non-nullable because a vote must be associated with a Comment
  vote: VoteType! # Non-nullable because the type of vote (up/down) must be specified
}

enum VoteType {
  UP
  DOWN
}

type Mutation {
  createComment(input: CreateCommentInput!): Comment!
  voteComment(input: VoteCommentInput!): Comment!
}

type Subscription {
  commentAdded(articleId: ID!): Comment!
  commentVoted(commentId: ID!): Comment!
}

scalar DateTime
